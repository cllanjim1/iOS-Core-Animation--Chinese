#对等层级

所有的UIView都有一个CALayer的实例属性layer，叫做*（backing layer）*。视图负责创建和管理图层，并确保其对子视图添加或删除时，子视图对应的背景层在其图层树中一样被添加和移除。

图1.2为我们展示了对等层级的结构

![alt text](https://raw.githubusercontent.com/hhgz9527/qipaname/master/Resource/1.2.png)
>左侧图层树的结构和右侧视图树的结构是对等的

实际上，你在屏幕上看到的内容和动画效果都是由背景层来完成的。UIView只是对iOS特有的功能，比如触摸响应进行了简单包装，对Core Animation低层级功能提供了更高层级的接口。

为什么iOS有UIView和CALayer两个对等层呢，而不是由其中一个来完成所有的事情？原因在于，我们需要将职责分解才能避免重复的代码。 iOS与Mac OS在事件处理和用户交互上的差异是十分大的，基于多点触摸的用户体验和鼠标、键盘的操作是完全不同的。这也就是为什么iOS有UIKit和UIView，Mac OS有AppKit和NSView。他们功能相似，但是却有着不同的实现。

绘制、布局和动画，相比之下，iPhone和iPad这些具备触摸屏的设备更像是笔记本和桌面电脑的表亲。把这些功能实现分离出独立的Core Animation框架，这样苹果能够在iOS和Mac OS上共享这些代码，使得无论是苹果自己的操作系统开发团队还是为两个平台开发软件的第三方开发者都可以更轻松的编写软件。

实际上，不只有两个，而是有四个这样的层次结构，每一个都负责不同的功能。除了视图树和图层树外，还有*展示树*和*渲染树*，我们分别会在第七章的“内置动画”和第十二章的“速度优化”中讨论。
