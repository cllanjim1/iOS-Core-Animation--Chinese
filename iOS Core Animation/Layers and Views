# 图层和视图
如果你曾经创建过iOS或者Mac OS的应用程序，那么你应该非常熟悉*视图（view）*。视图是一个矩形容器，它可以呈现一些内容如图片，文本，或者视频，并且能响应用户的动作，比如鼠标点击或者手势操作。视图可以相互嵌套，并形成层次，每个父视图负责管理子视图（*subview*）的位置。

图1.1展示了一个十分典型的视图层

![alt text](https://raw.githubusercontent.com/hhgz9527/qipaname/master/Resource/1.1.png)
>左侧为一个典型的iOS屏幕，右侧则是组成它的视图层级

在iOS中，所有视图都是继承自UIView类。UIView可响应触摸事件，支持着基于*Core Graphics*的图形绘制、旋转、缩放和一些简单的滑动、渐变的动画效果。

你也许没有意识到，这些任务大多数都不是由UIView自身完成的。主要工作都是依靠Core Animation的类CALayer来完成渲染、布局和动画效果的。

###CALayer

CALayer在概念上与UIView是十分相似的。他们都是一个矩形容器，并且也有层级关系；他们都能呈现一些内容如图片，文本或者背景色；同样他们也能够管理子视图*（sublayers）*的位置。他们都拥有能够创建动画和改变形状的方法和属性。UIView和CALayer最大的区别就在于UIView负责用户交互而CALayer没有。

CALayer没有响应链机制(iOS在视图层级中传播触摸事件的机制)，所以它不能响应事件，尽管它确实也提供了方法来判断点击的坐标是否在图层内*（更多内容请查看第三章 “几何图层”）*

###对等层级

所有的UIView都有一个CALayer的实例属性layer，叫做*（backing layer）*。视图负责创建和管理图层，并确保其对子视图添加或删除时，子视图对应的背景层在其图层树中一样被添加和移除。

图1.2为我们展示了对等层级的结构

![alt text](https://raw.githubusercontent.com/hhgz9527/qipaname/master/Resource/1.2.png)
>左侧图层树的结构和右侧视图树的结构是对等的

实际上，你在屏幕上看到的内容和动画效果都是由背景层来完成的。UIView只是对iOS特有的功能，比如触摸响应进行了简单包装，对Core Animation低层级功能提供了更高层级的接口。

为什么iOS有UIView和CALayer两个对等层呢，而不是由其中一个来完成所有的事情？原因在于，我们需要将职责分解才能避免重复的代码。 iOS与Mac OS在事件处理和用户交互上的差异是十分大的，基于多点触摸的用户体验和鼠标、键盘的操作是完全不同的。这也就是为什么iOS有UIKit和UIView，Mac OS有AppKit和NSView。他们功能相似，但是却有着不同的实现。

相比较之下绘制、布局和动画，同样适用于像iPhone和iPad这样触屏设备的桌面。在Core Animation框架中分离出这个功能的逻辑，这样苹果公司能够在iOS和Mac OS上共享这些代码，更加方便了苹果公司自己的开发团队和第三方开发者的在两个平台上的开发工作。

实际上，不是有两个，但是四个的这样层次结构，他们每个都在执行不同的功能，添加视图层和对应的图层树，他们是*展示树*和*底层树*，我们分别会在第七章的“隐藏动画”和第十二章的“速度优化”中讨论。

###布局的功能

如果说CALayer仅仅是实现UIView内部细节的工作，那我们为什么需要去了解他的有关信息？苹果公司提供了使用起来简单、优秀的UIView界面，我们何需去直接处理有关Core Animation那些复杂的信息呢？

简单来讲，我们不是真的需要去直接使用CALayer，因为苹果公司制作了一些使用很简单但功能很强大的方法，例如通过一些高级的API来让UIView*间接*完成动画效果。

但这是缺乏灵活性的简易方法，如果你要做一些稍微和平常不同的东西或者制作一些苹果公司没有公开的UIView类的界面功能，你不得不去尝试探索Core Animation底层的选择。

在此之前我们已经确定了图层是不能像UIView一样响应触摸事件，因此什么是可以做的，而什么是不能做的？下面是一些UIView中没有展现的CALayer的功能：

- 绘制阴影、圆角和边框色彩
- 3D变形和位置
- 不规则的边框
- 透明、遮盖内容
- 多级，非线性动画

在接下来的章节中，我们将一一探索这些功能，现在我们就去浏览一下在App中CALayer是如何被运用的。



