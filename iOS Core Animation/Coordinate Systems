#坐标系

图层像视图一样是具有层次的，它们都有对应的图层树。position相对于图层的bounds的子图层。如果子图层移动，所有的都如这个子图层。

这是为了图层位置方便，因为它允许你在根图层移动将多个图层做为一个单元的子树。但有些时候，你需要了解图层的*绝对*位置或（更常见）相对于图层的其他父层。

CAlayer在转换不同的图层坐标系时提供了一些有效的方法：
```
- (CGPoint)convertPoint:(CGPoint)point fromLayer:(CALayer *)layer;
- (CGPoint)convertPoint:(CGPoint)point toLayer:(CALayer *)layer;
- (CGRect)convertRect:(CGRect)rect fromLayer:(CALayer *)layer;
- (CGRect)convertRect:(CGRect)rect toLayer:(CALayer *)layer;
```
这些方法使你能够在点或矩形的坐标系统中定义一个图层,并将其转化为另一个的坐标系。

###几何折叠

惯例上iOS的position规定在父类图层的边界左上角。在Mac OS上，position通常是在左下角。Core Animation有优秀的geometryFlipped属性能够支持它们。这是通过BOOL值来判断这个几何图层是否根据子图层折叠这个图层。在iOS上设置这个属性为YES意味着子图层将垂直折叠将*底部*作为正常范围，而不是顶部（因为如果都是子图层，诸如此类，除非它们的geometryFlipped属性为YES）。

###Z轴

CALayer不像UIView是二维的，它是三维空间的。此前position和anchorPoint属性我们已经讨论过了，CALayer有两个额外的属性，图层的Z轴是通过zPosition和anchorPointZ描述的，它们都是浮点型值。

注意，这是没有*深度*属性补充bounds的宽和高。图层从根本上说是平面物体。你可以认为它们单个像硬纸张是二维的，但也能将多个粘在一起做成一个空心的像3D结构一样。

zPosition属性在大部分情况是十分有用的。在第五章中，我们将了解CATransform3D和学习如何在三维空间中移动和旋转图层。但是在没有使用变形前，实际使用中你会发现zPosition属性是唯一改变图层显示顺序的。

通常来讲，图层是根据子图层中的数组顺序出现的。这就是所谓的*画家算法*，因为它像画家画墙一样，后出现的图层将之前的图层覆盖。但可以通过设置图层的zPosition让你*向前移动*图层，在观看的角度上看着在其他图层之上（或减小zPosition的值将图层置于其他图层下面）。

图 3.8展示了视图构建器上的两个视图。如你所见，绿色视图首先出现在视图上，红色视图是后来才出现的。

![alt text](https://raw.githubusercontent.com/hhgz9527/qipaname/master/Resource/3.8.png)
>绿色视图在红色视图之下

通过这个的了解，希望你能运用在实际的应用开发中，但如果我们增加了绿色视图zPosition的值（见示例 3.3），我们发现顺序发生了颠倒（如图 3.9）。注意，我们不需要增加它；视图是无限薄的，所以只用增加zPosition的一个单位就能让绿色的视图在红色的上方。例如0.1或更小的0.0001也能产生如此影响，但是请谨慎使用这种非常小的数值，因为浮点值会导致计算误差造成视觉错误。

**调整zPosition改变显示的顺序**
```
@interface ViewController ()

@property (nonatomic, weak) IBOutlet UIView *greenView;
@property (nonatomic, weak) IBOutlet UIView *redView;

@end

@implementation ViewController

- (void)viewDidLoad {
    [super viewDidLoad];
￼
    //move the green view zPosition nearer to the camera
    self.greenView.layer.zPosition = 1.0f;
}

@end
```
![alt text](https://raw.githubusercontent.com/hhgz9527/qipaname/master/Resource/3.9.png)
>绿色视图在红色视图之上
