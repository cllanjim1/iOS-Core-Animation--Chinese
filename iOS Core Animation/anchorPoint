# anchorPoint
早前提到，视图的center属性和图层position属性都为图层相对子图层的anchorPoint位置。图层控制anchorPoint属性相当于frame位置的位置属性。你可以把anchorPoint理解为*操作*移动图层。

anchorPoint默认是在图层的中心，无论什么情况，图层都将围绕在它的周围。anchorPoint没有直接在UIView的接口中，这就是为什么视图的位置属性就被称为“center”。但是anchorPoint能够移动图层。你能够将他放置在图层frame的左上角，例如，图层将要向右下移动位置（见图3.3）而不是围绕它。

在第二章中，anchorPoint像contentsRect和contentsCenter一样是*单位坐标*，意味着它的坐标是相对于层的尺寸。左上角的是{0,0}，右下角为{1,1}，默认的中心位置是{0.5, 0.5}。anchorPoint能够被放置在图层的边界之外，设置的x或y值大于或小于零。

图3.3当我们改变anchorPoint，position属性没有改变。反而，图层移动frame的位置还是固定的。

![alt text](https://raw.githubusercontent.com/hhgz9527/qipaname/master/Resource/3.3.png)
>在框架内改变anchorPoint所造成的影响

既然如此，我们为什么要修改anchorPoint？我们能够把frame设置在想要的位置，所以没必要修改anchorPoint造成混乱？为了说明这个属性是有用的，我们需要尝试做一个例子。让我们创建一个闹钟且能够移动时针、分针和秒针。

闹钟的背景和指针可以使用下面四张图（见图3.4）。简单期间，我们将使用传统的方法来显示这些图片，使用四个单独的UIImageView（虽然我们能使用常规的视图来设置他们的内置图层的contents图像）。

![alt text](https://raw.githubusercontent.com/hhgz9527/qipaname/master/Resource/3.4.png)
>四张图片来构成闹钟的背景和指针

闹钟组合完成如图3.5。图像视图嵌套在另外一个视图容器中，他们都禁用了autoresizing和autolayout。因为autoresizing会影响视图的frame，如图3.2演示的，当图像旋转会使frame改变，如果旋转视图的大小这将导致布局出现问题。

我们将使用NSTimer更新闹钟，通过使用视图的transform数学来转动指针。（如果你不熟悉这个熟悉，可以不用担心；我们会在第五章“Transforms”中讲到）示例 3.1展示了我们的闹钟代码。

![alt text](https://raw.githubusercontent.com/hhgz9527/qipaname/master/Resource/3.5.png)
>界面构建器上布局我们的闹钟视图

**闹钟**
```
@interface ViewController ()

@property (nonatomic, weak) IBOutlet UIImageView *hourHand;
@property (nonatomic, weak) IBOutlet UIImageView *minuteHand;
@property (nonatomic, weak) IBOutlet UIImageView *secondHand;
@property (nonatomic, weak) NSTimer *timer;
@end

@implementation ViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    //start timer
    self.timer = [NSTimer scheduledTimerWithTimeInterval:1.0 target:self
selector:@selector(tick) userInfo:nil
￼
    //set initial hand positions
    [self tick];
}
- (void)tick {
    //convert time to hours, minutes and seconds
    NSCalendar *calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
    NSUInteger units = NSHourCalendarUnit | NSMinuteCalendarUnit |
NSSecondCalendarUnit;
    NSDateComponents *components = [calendar components:units
fromDate:[NSDate date]];
    CGFloat hoursAngle = (components.hour / 12.0) * M_PI * 2.0;
    //calculate hour hand angle
    //calculate minute hand angle
    CGFloat minsAngle = (components.minute / 60.0) * M_PI * 2.0;
    //calculate second hand angle
    CGFloat secsAngle = (components.second / 60.0) * M_PI * 2.0;
    //rotate hands
    self.hourHand.transform = CGAffineTransformMakeRotation(hoursAngle);
    self.minuteHand.transform = CGAffineTransformMakeRotation(minsAngle);
    self.secondHand.transform = CGAffineTransformMakeRotation(secsAngle);
}
@end
```
当你运行闹钟应用后，它看起来有些奇怪（见图3.6）.这是因为指针的图像围绕着中心转动，这不是我们想要看到的结果。

你也许认为在视图构建器中调整图像的位置来修复它，但这是不可能的，图像没有正确的在闹钟的背景中心旋转。

![alt text](https://raw.githubusercontent.com/hhgz9527/qipaname/master/Resource/3.6.png)
>在闹钟上排列错误的指针

最好的方法是通过anchorPoint属性解决它。在-viewDidLoad方法中添加一些额外代码，给每一个指针设置anchorPoint（示例 3.2）。图3.7展示了正确的结果。

**调整闹钟的anchorPoint值**
```
- (void)viewDidLoad {
    [super viewDidLoad];
    //adjust anchor points
    self.secondHand.layer.anchorPoint = CGPointMake(0.5f, 0.9f);
    self.minuteHand.layer.anchorPoint = CGPointMake(0.5f, 0.9f);
    self.hourHand.layer.anchorPoint = CGPointMake(0.5f, 0.9f);
    //start timer
    ...
}
```
![alt text](https://raw.githubusercontent.com/hhgz9527/qipaname/master/Resource/3.7.png)
>闹钟中正确的显示指针
